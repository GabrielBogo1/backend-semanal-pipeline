on:
  push:
    branches:
      - dev
      - main
      - release

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Dar permissão de execução ao Maven Wrapper
        run: chmod +x ./mvnw

      - name: Rodar testes
        run: ./mvnw test

  deploy-stage:
    needs: tests
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Dar permissão de execução ao Maven Wrapper
        run: chmod +x ./mvnw

      - name: Build do JAR com Maven
        run: ./mvnw package -DskipTests

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Autenticar com GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Build Docker image
        run: |
          docker build -t us-central1-docker.pkg.dev/cluster-mensal/meu-repo/backend-kubernetes2:dev-${{ github.sha }} .

      - name: Push para Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker push us-central1-docker.pkg.dev/cluster-mensal/meu-repo/backend-kubernetes2:dev-${{ github.sha }}

      - name: Deploy para GKE
        uses: google-github-actions/deploy-gke@main # Use uma versão específica aqui
        env:
          CLUSTER_NAME: meu-cluster-cicd
          LOCATION: us-central1-a # Alterado de GKE_LOCATION para LOCATION
          IMAGE: us-central1-docker.pkg.dev/cluster-mensal/meu-repo/backend-kubernetes2:dev-${{ github.sha }} # Alterado de GKE_IMAGE para IMAGE
          NAMESPACE: stage # Alterado de GKE_NAMESPACE para NAMESPACE
          APP_NAME: backend # Alterado de GKE_APP_NAME para APP_NAME
          PROJECT_ID: cluster-mensal # Alterado de GKE_PROJECT_ID para PROJECT_ID
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.LOCATION }} # Alterado de GKE_LOCATION para LOCATION
          image: ${{ env.IMAGE }} # Alterado de GKE_IMAGE para IMAGE
          namespace: ${{ env.NAMESPACE }} # Alterado de GKE_NAMESPACE para NAMESPACE
          app_name: ${{ env.APP_NAME }} # Alterado de GKE_APP_NAME para APP_NAME
          project_id: ${{ env.PROJECT_ID }} # Alterado de GKE_PROJECT_ID para PROJECT_ID

  deploy-prod:
    needs: tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Autenticar com GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Build e push da imagem Docker
        run: |
          IMAGE_NAME=us-central1-docker.pkg.dev/cluster-mensal/meu-repo/backend-kubernetes2
          TAG=prod-${{ github.sha }}
          docker build -t ${IMAGE_NAME}:${TAG} .
          docker push ${IMAGE_NAME}:${TAG}
          echo "IMAGE_TAG=${IMAGE_NAME}:${TAG}" >> $GITHUB_ENV # Exporta a tag

      - name: Deploy para GKE
        uses: google-github-actions/deploy-gke@v1
        with:
          cluster_name: meu-cluster-cicd
          location: us-central1-a
          credentials: ${{ secrets.GCP_SA_KEY }}
          image: ${{ env.IMAGE_TAG }}
          namespace: production # Use o namespace correto
          deployment_name: backend # Nome do seu Deployment no Kubernetes
          # Substitui o apply -f
          # k8s_manifests: k8s/backend/deployment.yaml # Caminho para o arquivo de deployment

  release:
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Dar permissão de execução ao Maven Wrapper
        run: chmod +x ./mvnw

      - name: Build do JAR com Maven
        run: ./mvnw package -DskipTests

      - name: Autenticar com GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Build e push da imagem Docker
        run: |
          IMAGE_NAME=us-central1-docker.pkg.dev/cluster-mensal/meu-repo/backend-kubernetes2
          TAG=release-${{ github.sha }}
          docker build -t ${IMAGE_NAME}:${TAG} .
          docker push ${IMAGE_NAME}:${TAG}
          echo "IMAGE_TAG=${IMAGE_NAME}:${TAG}" >> $GITHUB_ENV # Exporta a tag

      - name: Criar payload do Slack
        run: |
          echo "{\"text\":\"Nova release publicada para pré-produção: ${{ github.ref }}\"}" > slack-payload.json

      - name: Notificação Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: ./slack-payload.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
